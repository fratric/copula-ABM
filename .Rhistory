countBuy <- countBuy + 1
}else if(Ecpt[i,t] < pt[t-1]){
countSell <- countSell + 1
}
}
Dt[t-1] <- countBuy
St[t-1] <- countSell
deltap[t] <- a*(1 + Dt[t-1] - St[t-1]) + rnorm(1, mean=0, sd = sigmadelta)
pt[t] <- pt[t-1] + deltap[t] #aggregation variable
if(pt[t] <= 0){
print(paste("default at time",toString(t)))
defaultCount <- defaultCount + 1
break;
}
}
returnList <- list("pt" = pt, "deltap" = deltap)
return(returnList)
}
#' #' market maker parameters
#' a <- 0.2 * 10^(-2)
#' sigmadelta <- 0.005
#'
#'
#' #trader parameters
#' sigmaalfa <- 1 #* 10^(-10)
#' sigmabeta <- 1 #* 10^(-10)
#' meanf <- 0.6
#' sdf <- 0.1
#' meancc <- 0.8
#' sdcc <- 0.4
#' market maker parameters
a <- 0.5 * 10^(-2)
sigmadelta <- 0.005
#trader parameters
sigmaalfa <- 1 #* 10^(-10)
sigmabeta <- 1 #* 10^(-10)
meanf <- 0.6
sdf <- 0.1
meancc <- 0.8
sdcc <- 0.4
sim <- 20
MsimX <- matrix(nrow = sim, ncol = Tt)
deltaPsimX<- matrix(nrow = sim, ncol = Tt)
for(s in 1:sim){
x <- simulation(a = a, sigmadelta = sigmadelta, sigmaalfa = sigmaalfa, sigmabeta = sigmabeta, meanf = meanf, sdf = sdf, meancc = meancc, sdcc = sdcc, pt1 = 10, pt2 = 11)
MsimX[s,] <- x$pt
deltaPsimX[s,] <- x$deltap
}
hist(deltaPsimX)
matplot(t(MsimX), type="l", ylab = "value of asset", xlab = "time")#, ylim = c(7,12.75))
}
for(s in 1:sim){
x <- simulation(a = a, sigmadelta = sigmadelta, sigmaalfa = sigmaalfa, sigmabeta = sigmabeta, meanf = meanf, sdf = sdf, meancc = meancc, sdcc = sdcc, pt1 = 10, pt2 = 14)
MsimX[s,] <- x$pt
deltaPsimX[s,] <- x$deltap
}
hist(deltaPsimX)
matplot(t(MsimX), type="l", ylab = "value of asset", xlab = "time")#, ylim = c(7,12.75))
sim <- 50
MsimX <- matrix(nrow = sim, ncol = Tt)
deltaPsimX<- matrix(nrow = sim, ncol = Tt)
for(s in 1:sim){
x <- simulation(a = a, sigmadelta = sigmadelta, sigmaalfa = sigmaalfa, sigmabeta = sigmabeta, meanf = meanf, sdf = sdf, meancc = meancc, sdcc = sdcc, pt1 = 10, pt2 = 14)
MsimX[s,] <- x$pt
deltaPsimX[s,] <- x$deltap
}
hist(deltaPsimX)
matplot(t(MsimX), type="l", ylab = "value of asset", xlab = "time")#, ylim = c(7,12.75))
simulation <- function(a, sigmadelta, sigmaalfa, sigmabeta, meanf, sdf, meancc, sdcc, pt1, pt2, joeParam){
defaultCount <- 0 #number of defaults
pt <- vector(length = Tt) #price adjustment
deltap <- vector(length = Tt)
f <- matrix(nrow = Nfund, ncol = Tt) #intensity of fundamental trader
cc <- matrix(nrow = Ntech, ncol = Tt) #intensity of technikal trader
Dt <- vector(length = Tt) #number of buy
St <- vector(length = Tt) #number of sell
Efpt <- matrix(0, nrow = Nfund, ncol = Tt) #Expectation of fundamental trader
Ecpt <- matrix(0, nrow = Ntech, ncol = Tt) #Expectation of technikal trader
#initialization
pt[1] <- pt1
pt[2] <- pt2
joe.cop <- joeCopula(joeParam, dim = N)
u01 <- rCopula(Tt, joe.cop)
for(t in 3:Tt){
countBuy <- 0
countSell <- 0
#herding behaviour description
#    if(t == T1){
#      joe.cop <- joeCopula(7, dim = N)
#      u01 <- rCopula(Tt, joe.cop)
#    }else if(t == T2){
#      joe.cop <- joeCopula(1.02, dim = N)
#      u01 <- rCopula(Tt, joe.cop)
#    }
for(i in 1:Nfund){
f[i,t] <- qnorm(u01[t,i], mean = meanf, sd = sdf) #values u01[t,1:Nfund]; Q[N(meanf,sdf)]
Efpt[i,t] <- pt[t-1] + f[i,t] * (Ft[t-1] - pt[t-1]) + rnorm(1, mean = 0, sd = sigmaalfa)
if(Efpt[i,t] < Ft[t]){
countBuy <- countBuy + 1
}else if(Efpt[i,t] > Ft[t]){
countSell <- countSell + 1
}
}
for(i in 1:Ntech){ #values u01[t,Nfund+1:N]; Q[N(meanf,sdf)]
cc[i,t] <- qnorm(u01[t,Nfund + i], mean = meancc, sd = sdcc)
Ecpt[i,t] <- pt[t-1] + cc[i,t] * (pt[t-1] - pt[t-2]) + rnorm(1, mean = 0, sd = sigmabeta)
if(Ecpt[i,t] > pt[t-1]){
countBuy <- countBuy + 1
}else if(Ecpt[i,t] < pt[t-1]){
countSell <- countSell + 1
}
}
Dt[t-1] <- countBuy
St[t-1] <- countSell
deltap[t] <- a*(1 + Dt[t-1] - St[t-1]) + rnorm(1, mean=0, sd = sigmadelta)
pt[t] <- pt[t-1] + deltap[t] #aggregation variable
if(pt[t] <= 0){
print(paste("default at time",toString(t)))
defaultCount <- defaultCount + 1
break;
}
}
returnList <- list("pt" = pt, "deltap" = deltap)
return(returnList)
}
for(s in 1:sim){
x <- simulation(a = a, sigmadelta = sigmadelta, sigmaalfa = sigmaalfa, sigmabeta = sigmabeta, meanf = meanf, sdf = sdf, meancc = meancc, sdcc = sdcc, pt1 = 10, pt2 = 14, joeParam = 1.2)
MsimX[s,] <- x$pt
deltaPsimX[s,] <- x$deltap
}
hist(deltaPsimX)
matplot(t(MsimX), type="l", ylab = "value of asset", xlab = "time")#, ylim = c(7,12.75))
matplot(t(deltaPsimX), type="l", ylab = "delta p", xlab = "time")
deltaPsimX[1,]
deltaPsimX[,1]
deltaPsimX[,2:3]
matplot(t(deltaPsimX[,2:3]), type="l", ylab = "delta p", xlab = "time")
matplot(t(MsimX[,2:3]), type="l", ylab = "value of asset", xlab = "time")#, ylim = c(7,12.75))
matplot(t(MsimX[,2:3]), type="l", ylab = "value of asset", xlab = "time")#, ylim = c(7,12.75))
matplot(t(deltaPsimX[,2:3]), type="l", ylab = "delta p", xlab = "time")
hist(deltaPsimX)
hist(deltaPsimX)
matplot(t(deltaPsimX[,2:3]), type="l", ylab = "delta p", xlab = "time")
for(s in 1:sim){
x <- simulation(a = a, sigmadelta = sigmadelta, sigmaalfa = sigmaalfa, sigmabeta = sigmabeta, meanf = meanf, sdf = sdf, meancc = meancc, sdcc = sdcc, pt1 = 10, pt2 = 14, joeParam = 7)
MsimX[s,] <- x$pt
deltaPsimX[s,] <- x$deltap
}
hist(deltaPsimX)
matplot(t(deltaPsimX[,2:3]), type="l", ylab = "delta p", xlab = "time")
sim <- 1000
MsimX <- matrix(nrow = sim, ncol = Tt)
deltaPsimX<- matrix(nrow = sim, ncol = Tt)
for(s in 1:sim){
x <- simulation(a = a, sigmadelta = sigmadelta, sigmaalfa = sigmaalfa, sigmabeta = sigmabeta, meanf = meanf, sdf = sdf, meancc = meancc, sdcc = sdcc, pt1 = 10, pt2 = 14, joeParam = 7)
MsimX[s,] <- x$pt
deltaPsimX[s,] <- x$deltap
}
hist(deltaPsimX)
matplot(t(deltaPsimX[,2:3]), type="l", ylab = "delta p", xlab = "time")
for(s in 1:sim){
x <- simulation(a = a, sigmadelta = sigmadelta, sigmaalfa = sigmaalfa, sigmabeta = sigmabeta, meanf = meanf, sdf = sdf, meancc = meancc, sdcc = sdcc, pt1 = 10, pt2 = 14, joeParam = 1.2)
MsimX[s,] <- x$pt
deltaPsimX[s,] <- x$deltap
}
hist(deltaPsimX)
matplot(t(deltaPsimX[,2:3]), type="l", ylab = "delta p", xlab = "time")
hist(deltaPsimX, breaks = 40)
sim <- 10
setwd("C:/Users/Peter/Desktop/phd/R/demo")
samples <- 3 #generated series from ABM will be of length 300, there are two initial values
#set.seed(2020)
#'
#' #ABM
#'
Nfund <- 300
Ntech <- 700
N <- Ntech + Nfund
Tt <- samples
Ft <- as.vector(read.table("C:/Users/Peter/Desktop/phd/R/demo/fundamentalPrice.txt")$x)
#plot(Ft, type = "l", ylim = c(8.5,11.75), xlab = "time", ylab="fundamental price")
#'
#' # joe copula
#'
library(copula)
simulation <- function(a, sigmadelta, sigmaalfa, sigmabeta, meanf, sdf, meancc, sdcc, pt1, pt2, joeParam){
defaultCount <- 0 #number of defaults
pt <- vector(length = Tt) #price adjustment
deltap <- vector(length = Tt)
f <- matrix(nrow = Nfund, ncol = Tt) #intensity of fundamental trader
cc <- matrix(nrow = Ntech, ncol = Tt) #intensity of technikal trader
Dt <- vector(length = Tt) #number of buy
St <- vector(length = Tt) #number of sell
Efpt <- matrix(0, nrow = Nfund, ncol = Tt) #Expectation of fundamental trader
Ecpt <- matrix(0, nrow = Ntech, ncol = Tt) #Expectation of technikal trader
#initialization
pt[1] <- pt1
pt[2] <- pt2
joe.cop <- joeCopula(joeParam, dim = N)
u01 <- rCopula(Tt, joe.cop)
for(t in 3:Tt){
countBuy <- 0
countSell <- 0
#herding behaviour description
#    if(t == T1){
#      joe.cop <- joeCopula(7, dim = N)
#      u01 <- rCopula(Tt, joe.cop)
#    }else if(t == T2){
#      joe.cop <- joeCopula(1.02, dim = N)
#      u01 <- rCopula(Tt, joe.cop)
#    }
# brocken-homes paper
for(i in 1:Nfund){
f[i,t] <- qnorm(u01[t,i], mean = meanf, sd = sdf) #values u01[t,1:Nfund]; Q[N(meanf,sdf)]
Efpt[i,t] <- pt[t-1] + f[i,t] * (Ft[t-1] - pt[t-1]) + rnorm(1, mean = 0, sd = sigmaalfa)
if(Efpt[i,t] < Ft[t]){
countBuy <- countBuy + 1
}else if(Efpt[i,t] > Ft[t]){
countSell <- countSell + 1
}
}
for(i in 1:Ntech){ #values u01[t,Nfund+1:N]; Q[N(meanf,sdf)]
cc[i,t] <- qnorm(u01[t,Nfund + i], mean = meancc, sd = sdcc)
Ecpt[i,t] <- pt[t-1] + cc[i,t] * (pt[t-1] - pt[t-2]) + rnorm(1, mean = 0, sd = sigmabeta)
if(Ecpt[i,t] > pt[t-1]){
countBuy <- countBuy + 1
}else if(Ecpt[i,t] < pt[t-1]){
countSell <- countSell + 1
}
}
Dt[t-1] <- countBuy
St[t-1] <- countSell
deltap[t] <- a*(1 + Dt[t-1] - St[t-1]) + rnorm(1, mean=0, sd = sigmadelta)
pt[t] <- pt[t-1] + deltap[t] #aggregation variable
if(pt[t] <= 0){
print(paste("default at time",toString(t)))
defaultCount <- defaultCount + 1
break;
}
}
returnList <- list("pt" = pt, "deltap" = deltap)
return(returnList)
}
#' #' market maker parameters
#' a <- 0.2 * 10^(-2)
#' sigmadelta <- 0.005
#'
#'
#' #trader parameters
#' sigmaalfa <- 1 #* 10^(-10)
#' sigmabeta <- 1 #* 10^(-10)
#' meanf <- 0.6
#' sdf <- 0.1
#' meancc <- 0.8
#' sdcc <- 0.4
#' market maker parameters
a <- 0.5 * 10^(-2)
sigmadelta <- 0.005
#trader parameters
sigmaalfa <- 1 #* 10^(-10)
sigmabeta <- 1 #* 10^(-10)
meanf <- 0.6
sdf <- 0.1
meancc <- 0.8
sdcc <- 0.4
sim <- 10
MsimX <- matrix(nrow = sim, ncol = Tt)
MsimX <- matrix(nrow = sim, ncol = Tt)
deltaPsimX<- matrix(nrow = sim, ncol = Tt)
for(s in 1:sim){
x <- simulation(a = a, sigmadelta = sigmadelta, sigmaalfa = sigmaalfa, sigmabeta = sigmabeta, meanf = meanf, sdf = sdf, meancc = meancc, sdcc = sdcc, pt1 = 10, pt2 = 13, joeParam = 1.2)
MsimX[s,] <- x$pt
deltaPsimX[s,] <- x$deltap
}
hist(deltaPsimX)
matplot(t(deltaPsimX[,2:3]), type="l", ylab = "delta p", xlab = "time")
sim <- 10
MsimX <- matrix(nrow = sim, ncol = Tt)
deltaPsimX<- matrix(nrow = sim, ncol = Tt)
for(s in 1:sim){
x <- simulation(a = a, sigmadelta = sigmadelta, sigmaalfa = sigmaalfa, sigmabeta = sigmabeta, meanf = meanf, sdf = sdf, meancc = meancc, sdcc = sdcc, pt1 = 10, pt2 = 13, joeParam = 7)
MsimX[s,] <- x$pt
deltaPsimX[s,] <- x$deltap
}
hist(deltaPsimX)
matplot(t(deltaPsimX[,2:3]), type="l", ylab = "delta p", xlab = "time")
matplot(t(deltaPsimX[,2:3]), type="l", ylab = "delta p", xlab = "time", ylim = c(0,3))
matplot(t(deltaPsimX[,2:3]), type="l", ylab = "delta p", xlab = "time", ylim = c(0,3), main = "Independence")
for(s in 1:sim){
x <- simulation(a = a, sigmadelta = sigmadelta, sigmaalfa = sigmaalfa, sigmabeta = sigmabeta, meanf = meanf, sdf = sdf, meancc = meancc, sdcc = sdcc, pt1 = 10, pt2 = 13, joeParam = 1.02)
MsimX[s,] <- x$pt
deltaPsimX[s,] <- x$deltap
}
hist(deltaPsimX)
matplot(t(deltaPsimX[,2:3]), type="l", ylab = "delta p", xlab = "time", ylim = c(0,3), main = "Independence")
setwd("C:/Users/Peter/Desktop/phd/R/demo")
samples <- 3 #generated series from ABM will be of length 300, there are two initial values
#set.seed(2020)
#'
#' #ABM
#'
Nfund <- 300
Ntech <- 700
N <- Ntech + Nfund
Tt <- samples
Ft <- as.vector(read.table("C:/Users/Peter/Desktop/phd/R/demo/fundamentalPrice.txt")$x)
#plot(Ft, type = "l", ylim = c(8.5,11.75), xlab = "time", ylab="fundamental price")
#'
#' # joe copula
#'
library(copula)
simulation <- function(a, sigmadelta, sigmaalfa, sigmabeta, meanf, sdf, meancc, sdcc, pt1, pt2, joeParam){
defaultCount <- 0 #number of defaults
pt <- vector(length = Tt) #price adjustment
deltap <- vector(length = Tt)
f <- matrix(nrow = Nfund, ncol = Tt) #intensity of fundamental trader
cc <- matrix(nrow = Ntech, ncol = Tt) #intensity of technikal trader
Dt <- vector(length = Tt) #number of buy
St <- vector(length = Tt) #number of sell
Efpt <- matrix(0, nrow = Nfund, ncol = Tt) #Expectation of fundamental trader
Ecpt <- matrix(0, nrow = Ntech, ncol = Tt) #Expectation of technikal trader
#initialization
pt[1] <- pt1
pt[2] <- pt2
joe.cop <- joeCopula(joeParam, dim = N)
u01 <- rCopula(Tt, joe.cop)
for(t in 3:Tt){
countBuy <- 0
countSell <- 0
#herding behaviour description
#    if(t == T1){
#      joe.cop <- joeCopula(7, dim = N)
#      u01 <- rCopula(Tt, joe.cop)
#    }else if(t == T2){
#      joe.cop <- joeCopula(1.02, dim = N)
#      u01 <- rCopula(Tt, joe.cop)
#    }
# brocken-homes paper
for(i in 1:Nfund){
f[i,t] <- qnorm(u01[t,i], mean = meanf, sd = sdf) #values u01[t,1:Nfund]; Q[N(meanf,sdf)]
Efpt[i,t] <- pt[t-1] + f[i,t] * (Ft[t-1] - pt[t-1]) + rnorm(1, mean = 0, sd = sigmaalfa)
if(Efpt[i,t] < Ft[t]){
countBuy <- countBuy + 1
}else if(Efpt[i,t] > Ft[t]){
countSell <- countSell + 1
}
}
for(i in 1:Ntech){ #values u01[t,Nfund+1:N]; Q[N(meanf,sdf)]
cc[i,t] <- qnorm(u01[t,Nfund + i], mean = meancc, sd = sdcc)
Ecpt[i,t] <- pt[t-1] + cc[i,t] * (pt[t-1] - pt[t-2]) + rnorm(1, mean = 0, sd = sigmabeta)
if(Ecpt[i,t] > pt[t-1]){
countBuy <- countBuy + 1
}else if(Ecpt[i,t] < pt[t-1]){
countSell <- countSell + 1
}
}
Dt[t-1] <- countBuy
St[t-1] <- countSell
deltap[t] <- a*(1 + Dt[t-1] - St[t-1]) + rnorm(1, mean=0, sd = sigmadelta)
pt[t] <- pt[t-1] + deltap[t] #aggregation variable
if(pt[t] <= 0){
print(paste("default at time",toString(t)))
defaultCount <- defaultCount + 1
break;
}
}
returnList <- list("pt" = pt, "deltap" = deltap)
return(returnList)
}
#' #' market maker parameters
#' a <- 0.2 * 10^(-2)
#' sigmadelta <- 0.005
#'
#'
#' #trader parameters
#' sigmaalfa <- 1 #* 10^(-10)
#' sigmabeta <- 1 #* 10^(-10)
#' meanf <- 0.6
#' sdf <- 0.1
#' meancc <- 0.8
#' sdcc <- 0.4
#' market maker parameters
a <- 0.5 * 10^(-2)
sigmadelta <- 0.005
#trader parameters
sigmaalfa <- 1 #* 10^(-10)
sigmabeta <- 1 #* 10^(-10)
meanf <- 0.6
sdf <- 0.1
meancc <- 0.8
sdcc <- 0.4
sim <- 1000
MsimX <- matrix(nrow = sim, ncol = Tt)
deltaPsimX<- matrix(nrow = sim, ncol = Tt)
for(s in 1:sim){
x <- simulation(a = a, sigmadelta = sigmadelta, sigmaalfa = sigmaalfa, sigmabeta = sigmabeta, meanf = meanf, sdf = sdf, meancc = meancc, sdcc = sdcc, pt1 = 10, pt2 = 13, joeParam = 1.02)
MsimX[s,] <- x$pt
deltaPsimX[s,] <- x$deltap
}
setwd("C:/Users/Peter/Desktop/phd/R/demo")
samples <- 3 #generated series from ABM will be of length 300, there are two initial values
#set.seed(2020)
#'
#' #ABM
#'
Nfund <- 300
Ntech <- 700
N <- Ntech + Nfund
Tt <- samples
Ft <- as.vector(read.table("C:/Users/Peter/Desktop/phd/R/demo/fundamentalPrice.txt")$x)
#plot(Ft, type = "l", ylim = c(8.5,11.75), xlab = "time", ylab="fundamental price")
#'
#' # joe copula
#'
library(copula)
simulation <- function(a, sigmadelta, sigmaalfa, sigmabeta, meanf, sdf, meancc, sdcc, pt1, pt2, joeParam){
defaultCount <- 0 #number of defaults
pt <- vector(length = Tt) #price adjustment
deltap <- vector(length = Tt)
f <- matrix(nrow = Nfund, ncol = Tt) #intensity of fundamental trader
cc <- matrix(nrow = Ntech, ncol = Tt) #intensity of technikal trader
Dt <- vector(length = Tt) #number of buy
St <- vector(length = Tt) #number of sell
Efpt <- matrix(0, nrow = Nfund, ncol = Tt) #Expectation of fundamental trader
Ecpt <- matrix(0, nrow = Ntech, ncol = Tt) #Expectation of technikal trader
#initialization
pt[1] <- pt1
pt[2] <- pt2
joe.cop <- joeCopula(joeParam, dim = N)
u01 <- rCopula(Tt, joe.cop)
for(t in 3:Tt){
countBuy <- 0
countSell <- 0
#herding behaviour description
#    if(t == T1){
#      joe.cop <- joeCopula(7, dim = N)
#      u01 <- rCopula(Tt, joe.cop)
#    }else if(t == T2){
#      joe.cop <- joeCopula(1.02, dim = N)
#      u01 <- rCopula(Tt, joe.cop)
#    }
# brocken-homes paper
for(i in 1:Nfund){
f[i,t] <- qnorm(u01[t,i], mean = meanf, sd = sdf) #values u01[t,1:Nfund]; Q[N(meanf,sdf)]
Efpt[i,t] <- pt[t-1] + f[i,t] * (Ft[t-1] - pt[t-1]) + rnorm(1, mean = 0, sd = sigmaalfa)
if(Efpt[i,t] < Ft[t]){
countBuy <- countBuy + 1
}else if(Efpt[i,t] > Ft[t]){
countSell <- countSell + 1
}
}
for(i in 1:Ntech){ #values u01[t,Nfund+1:N]; Q[N(meanf,sdf)]
cc[i,t] <- qnorm(u01[t,Nfund + i], mean = meancc, sd = sdcc)
Ecpt[i,t] <- pt[t-1] + cc[i,t] * (pt[t-1] - pt[t-2]) + rnorm(1, mean = 0, sd = sigmabeta)
if(Ecpt[i,t] > pt[t-1]){
countBuy <- countBuy + 1
}else if(Ecpt[i,t] < pt[t-1]){
countSell <- countSell + 1
}
}
Dt[t-1] <- countBuy
St[t-1] <- countSell
deltap[t] <- a*(1 + Dt[t-1] - St[t-1]) + rnorm(1, mean=0, sd = sigmadelta)
pt[t] <- pt[t-1] + deltap[t] #aggregation variable
if(pt[t] <= 0){
print(paste("default at time",toString(t)))
defaultCount <- defaultCount + 1
break;
}
}
returnList <- list("pt" = pt, "deltap" = deltap)
return(returnList)
}
#' #' market maker parameters
#' a <- 0.2 * 10^(-2)
#' sigmadelta <- 0.005
#'
#'
#' #trader parameters
#' sigmaalfa <- 1 #* 10^(-10)
#' sigmabeta <- 1 #* 10^(-10)
#' meanf <- 0.6
#' sdf <- 0.1
#' meancc <- 0.8
#' sdcc <- 0.4
#' market maker parameters
a <- 0.5 * 10^(-2)
sigmadelta <- 0.005
#trader parameters
sigmaalfa <- 1 #* 10^(-10)
sigmabeta <- 1 #* 10^(-10)
meanf <- 0.6
sdf <- 0.1
meancc <- 0.8
sdcc <- 0.4
sim <- 1000
MsimX <- matrix(nrow = sim, ncol = Tt)
deltaPsimX<- matrix(nrow = sim, ncol = Tt)
for(s in 1:sim){
x <- simulation(a = a, sigmadelta = sigmadelta, sigmaalfa = sigmaalfa, sigmabeta = sigmabeta, meanf = meanf, sdf = sdf, meancc = meancc, sdcc = sdcc, pt1 = 10, pt2 = 13, joeParam = 1.02)
MsimX[s,] <- x$pt
deltaPsimX[s,] <- x$deltap
}
hist(deltaPsimX)
matplot(t(deltaPsimX[,2:3]), type="l", ylab = "delta p", xlab = "time", ylim = c(0,3), main = "Independence")
for(s in 1:sim){
x <- simulation(a = a, sigmadelta = sigmadelta, sigmaalfa = sigmaalfa, sigmabeta = sigmabeta, meanf = meanf, sdf = sdf, meancc = meancc, sdcc = sdcc, pt1 = 10, pt2 = 13, joeParam = 7)
MsimX[s,] <- x$pt
deltaPsimX[s,] <- x$deltap
}
hist(deltaPsimX)
matplot(t(deltaPsimX[,2:3]), type="l", ylab = "delta p", xlab = "time", ylim = c(0,3), main = "Joe")
